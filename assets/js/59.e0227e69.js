(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{399:function(e,t,a){"use strict";a.r(t);var r=a(4),l=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hbase-java-api-高级特性之过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-java-api-高级特性之过滤器"}},[e._v("#")]),e._v(" HBase Java API 高级特性之过滤器")]),e._v(" "),t("p",[e._v("HBase 中两种主要的数据读取方法是 "),t("code",[e._v("get()")]),e._v(" 和 "),t("code",[e._v("scan()")]),e._v("，它们都支持直接访问数据和通过指定起止 row key 访问数据。此外，可以指定列族、列、时间戳和版本号来进行条件查询。它们的缺点是不支持细粒度的筛选功能。为了弥补这种不足，"),t("code",[e._v("Get")]),e._v(" 和 "),t("code",[e._v("Scan")]),e._v(" 支持通过过滤器（"),t("code",[e._v("Filter")]),e._v("）对 row key、列或列值进行过滤。")]),e._v(" "),t("p",[e._v("HBase 提供了一些内置过滤器，也允许用户通过继承 "),t("code",[e._v("Filter")]),e._v(" 类来自定义过滤器。所有的过滤器都在服务端生效，称为 "),t("strong",[e._v("谓词下推")]),e._v("。这样可以保证被过滤掉的数据不会被传到客户端。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://www.oreilly.com/api/v2/epubs/9781449314682/files/httpatomoreillycomsourceoreillyimages889252.png",alt:""}})]),e._v(" "),t("p",[t("em",[e._v("图片来自 HBase 权威指南")])]),e._v(" "),t("p",[e._v("HBase 过滤器层次结构的最底层是 "),t("code",[e._v("Filter")]),e._v(" 接口和 "),t("code",[e._v("FilterBase")]),e._v(" 抽象类。大部分过滤器都直接继承自 "),t("code",[e._v("FilterBase")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"比较过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较过滤器"}},[e._v("#")]),e._v(" 比较过滤器")]),e._v(" "),t("p",[e._v("所有比较过滤器均继承自 "),t("code",[e._v("CompareFilter")]),e._v("。"),t("code",[e._v("CompareFilter")]),e._v(" 比 "),t("code",[e._v("FilterBase")]),e._v(" 多了一个 "),t("code",[e._v("compare()")]),e._v(" 方法，它需要传入参数定义比较操作的过程：比较运算符和比较器。")]),e._v(" "),t("p",[e._v("创建一个比较过滤器需要两个参数，分别是"),t("strong",[e._v("比较运算符")]),e._v("和"),t("strong",[e._v("比较器实例")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" public CompareFilter(final CompareOp compareOp,final ByteArrayComparable comparator) {\n    this.compareOp = compareOp;\n    this.comparator = comparator;\n  }\n")])])]),t("h3",{attrs:{id:"比较运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[e._v("#")]),e._v(" 比较运算符")]),e._v(" "),t("ul",[t("li",[e._v("LESS (<)")]),e._v(" "),t("li",[e._v("LESS_OR_EQUAL (<=)")]),e._v(" "),t("li",[e._v("EQUAL (=)")]),e._v(" "),t("li",[e._v("NOT_EQUAL (!=)")]),e._v(" "),t("li",[e._v("GREATER_OR_EQUAL (>=)")]),e._v(" "),t("li",[e._v("GREATER (>)")]),e._v(" "),t("li",[e._v("NO_OP (排除所有符合条件的值)")])]),e._v(" "),t("p",[e._v("比较运算符均定义在枚举类 "),t("code",[e._v("CompareOperator")]),e._v(" 中")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@InterfaceAudience.Public\npublic enum CompareOperator {\n  LESS,\n  LESS_OR_EQUAL,\n  EQUAL,\n  NOT_EQUAL,\n  GREATER_OR_EQUAL,\n  GREATER,\n  NO_OP,\n}\n")])])]),t("blockquote",[t("p",[e._v("注意：在 1.x 版本的 HBase 中，比较运算符定义在 "),t("code",[e._v("CompareFilter.CompareOp")]),e._v(" 枚举类中，但在 2.0 之后这个类就被标识为 @deprecated ，并会在 3.0 移除。所以 2.0 之后版本的 HBase 需要使用 "),t("code",[e._v("CompareOperator")]),e._v(" 这个枚举类。")])]),e._v(" "),t("h3",{attrs:{id:"比较器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较器"}},[e._v("#")]),e._v(" 比较器")]),e._v(" "),t("p",[e._v("所有比较器均继承自 "),t("code",[e._v("ByteArrayComparable")]),e._v(" 抽象类，常用的有以下几种：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("BinaryComparator")]),e._v(" : 使用 "),t("code",[e._v("Bytes.compareTo(byte []，byte [])")]),e._v(" 按字典序比较指定的字节数组。")]),e._v(" "),t("li",[t("strong",[e._v("BinaryPrefixComparator")]),e._v(" : 按字典序与指定的字节数组进行比较，但只比较到这个字节数组的长度。")]),e._v(" "),t("li",[t("strong",[e._v("RegexStringComparator")]),e._v(" : 使用给定的正则表达式与指定的字节数组进行比较。仅支持 "),t("code",[e._v("EQUAL")]),e._v(" 和 "),t("code",[e._v("NOT_EQUAL")]),e._v(" 操作。")]),e._v(" "),t("li",[t("strong",[e._v("SubStringComparator")]),e._v(" : 测试给定的子字符串是否出现在指定的字节数组中，比较不区分大小写。仅支持 "),t("code",[e._v("EQUAL")]),e._v(" 和 "),t("code",[e._v("NOT_EQUAL")]),e._v(" 操作。")]),e._v(" "),t("li",[t("strong",[e._v("NullComparator")]),e._v(" ：判断给定的值是否为空。")]),e._v(" "),t("li",[t("strong",[e._v("BitComparator")]),e._v(" ：按位进行比较。")])]),e._v(" "),t("p",[t("code",[e._v("BinaryPrefixComparator")]),e._v(" 和 "),t("code",[e._v("BinaryComparator")]),e._v(" 的区别不是很好理解，这里举例说明一下：")]),e._v(" "),t("p",[e._v("在进行 "),t("code",[e._v("EQUAL")]),e._v(" 的比较时，如果比较器传入的是 "),t("code",[e._v("abcd")]),e._v(" 的字节数组，但是待比较数据是 "),t("code",[e._v("abcdefgh")]),e._v("：")]),e._v(" "),t("ul",[t("li",[e._v("如果使用的是 "),t("code",[e._v("BinaryPrefixComparator")]),e._v(" 比较器，则比较以 "),t("code",[e._v("abcd")]),e._v(" 字节数组的长度为准，即 "),t("code",[e._v("efgh")]),e._v(" 不会参与比较，这时候认为 "),t("code",[e._v("abcd")]),e._v(" 与 "),t("code",[e._v("abcdefgh")]),e._v(" 是满足 "),t("code",[e._v("EQUAL")]),e._v(" 条件的；")]),e._v(" "),t("li",[e._v("如果使用的是 "),t("code",[e._v("BinaryComparator")]),e._v(" 比较器，则认为其是不相等的。")])]),e._v(" "),t("h3",{attrs:{id:"比较过滤器种类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较过滤器种类"}},[e._v("#")]),e._v(" 比较过滤器种类")]),e._v(" "),t("p",[e._v("比较过滤器共有五个（Hbase 1.x 版本和 2.x 版本相同）：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("RowFilter")]),e._v(" ：基于行键来过滤数据；")]),e._v(" "),t("li",[t("strong",[e._v("FamilyFilterr")]),e._v(" ：基于列族来过滤数据；")]),e._v(" "),t("li",[t("strong",[e._v("QualifierFilterr")]),e._v(" ：基于列限定符（列名）来过滤数据；")]),e._v(" "),t("li",[t("strong",[e._v("ValueFilterr")]),e._v(" ：基于单元格 (cell) 的值来过滤数据；")]),e._v(" "),t("li",[t("strong",[e._v("DependentColumnFilter")]),e._v(" ：指定一个参考列来过滤其他列的过滤器，过滤的原则是基于参考列的时间戳来进行筛选 。")])]),e._v(" "),t("p",[e._v("前四种过滤器的使用方法相同，均只要传递比较运算符和运算器实例即可构建，然后通过 "),t("code",[e._v("setFilter")]),e._v(" 方法传递给 "),t("code",[e._v("scan")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' Filter filter  = new RowFilter(CompareOperator.LESS_OR_EQUAL,\n                                new BinaryComparator(Bytes.toBytes("xxx")));\n  scan.setFilter(filter);\n')])])]),t("p",[t("code",[e._v("DependentColumnFilter")]),e._v(" 的使用稍微复杂一点，这里单独做下说明。")]),e._v(" "),t("h3",{attrs:{id:"dependentcolumnfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependentcolumnfilter"}},[e._v("#")]),e._v(" DependentColumnFilter")]),e._v(" "),t("p",[e._v("可以把 "),t("code",[e._v("DependentColumnFilter")]),e._v(" 理解为"),t("strong",[e._v("一个 valueFilter 和一个时间戳过滤器的组合")]),e._v("。"),t("code",[e._v("DependentColumnFilter")]),e._v(" 有三个带参构造器，这里选择一个参数最全的进行说明：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("DependentColumnFilter(final byte [] family, final byte[] qualifier,\n                               final boolean dropDependentColumn, final CompareOperator op,\n                               final ByteArrayComparable valueComparator)\n")])])]),t("ul",[t("li",[t("strong",[e._v("family")]),e._v(" ：列族")]),e._v(" "),t("li",[t("strong",[e._v("qualifier")]),e._v(" ：列限定符（列名）")]),e._v(" "),t("li",[t("strong",[e._v("dropDependentColumn")]),e._v(" ：决定参考列是否被包含在返回结果内，为 true 时表示参考列被返回，为 false 时表示被丢弃")]),e._v(" "),t("li",[t("strong",[e._v("op")]),e._v(" ：比较运算符")]),e._v(" "),t("li",[t("strong",[e._v("valueComparator")]),e._v(" ：比较器")])]),e._v(" "),t("p",[e._v("这里举例进行说明：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('DependentColumnFilter dependentColumnFilter = new DependentColumnFilter(\n    Bytes.toBytes("student"),\n    Bytes.toBytes("name"),\n    false,\n    CompareOperator.EQUAL,\n    new BinaryPrefixComparator(Bytes.toBytes("xiaolan")));\n')])])]),t("ul",[t("li",[e._v("首先会去查找 "),t("code",[e._v("student:name")]),e._v(" 中值以 "),t("code",[e._v("xiaolan")]),e._v(" 开头的所有数据获得 "),t("code",[e._v("参考数据集")]),e._v("，这一步等同于 valueFilter 过滤器；")]),e._v(" "),t("li",[e._v("其次再用参考数据集中所有数据的时间戳去检索其他列，获得时间戳相同的其他列的数据作为 "),t("code",[e._v("结果数据集")]),e._v("，这一步等同于时间戳过滤器；")]),e._v(" "),t("li",[e._v("最后如果 "),t("code",[e._v("dropDependentColumn")]),e._v(" 为 true，则返回 "),t("code",[e._v("参考数据集")]),e._v("+"),t("code",[e._v("结果数据集")]),e._v("，若为 false，则抛弃参考数据集，只返回 "),t("code",[e._v("结果数据集")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"专用过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#专用过滤器"}},[e._v("#")]),e._v(" 专用过滤器")]),e._v(" "),t("p",[e._v("专用过滤器通常直接继承自 "),t("code",[e._v("FilterBase")]),e._v("，用于更特定的场景。")]),e._v(" "),t("h3",{attrs:{id:"单列列值过滤器-singlecolumnvaluefilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单列列值过滤器-singlecolumnvaluefilter"}},[e._v("#")]),e._v(" 单列列值过滤器 (SingleColumnValueFilter)")]),e._v(" "),t("p",[e._v("基于某列（参考列）的值决定某行数据是否被过滤。其实例有以下方法：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("setFilterIfMissing(boolean filterIfMissing)")]),e._v(" ：默认值为 false，即如果该行数据不包含参考列，其依然被包含在最后的结果中；设置为 true 时，则不包含；")]),e._v(" "),t("li",[t("strong",[e._v("setLatestVersionOnly(boolean latestVersionOnly)")]),e._v(" ：默认为 true，即只检索参考列的最新版本数据；设置为 false，则检索所有版本数据。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(\n                "student".getBytes(),\n                "name".getBytes(),\n                CompareOperator.EQUAL,\n                new SubstringComparator("xiaolan"));\nsingleColumnValueFilter.setFilterIfMissing(true);\nscan.setFilter(singleColumnValueFilter);\n')])])]),t("h3",{attrs:{id:"单列列值排除器-singlecolumnvalueexcludefilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单列列值排除器-singlecolumnvalueexcludefilter"}},[e._v("#")]),e._v(" 单列列值排除器 (SingleColumnValueExcludeFilter)")]),e._v(" "),t("p",[t("code",[e._v("SingleColumnValueExcludeFilter")]),e._v(" 继承自上面的 "),t("code",[e._v("SingleColumnValueFilter")]),e._v("，过滤行为与其相反。")]),e._v(" "),t("h3",{attrs:{id:"行键前缀过滤器-prefixfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行键前缀过滤器-prefixfilter"}},[e._v("#")]),e._v(" 行键前缀过滤器 (PrefixFilter)")]),e._v(" "),t("p",[e._v("基于 RowKey 值决定某行数据是否被过滤。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PrefixFilter prefixFilter = new PrefixFilter(Bytes.toBytes("xxx"));\nscan.setFilter(prefixFilter);\n')])])]),t("h3",{attrs:{id:"列名前缀过滤器-columnprefixfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列名前缀过滤器-columnprefixfilter"}},[e._v("#")]),e._v(" 列名前缀过滤器 (ColumnPrefixFilter)")]),e._v(" "),t("p",[e._v("基于列限定符（列名）决定某行数据是否被过滤。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ColumnPrefixFilter columnPrefixFilter = new ColumnPrefixFilter(Bytes.toBytes("xxx"));\n scan.setFilter(columnPrefixFilter);\n')])])]),t("h3",{attrs:{id:"分页过滤器-pagefilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分页过滤器-pagefilter"}},[e._v("#")]),e._v(" 分页过滤器 (PageFilter)")]),e._v(" "),t("p",[e._v("可以使用这个过滤器实现对结果按行进行分页，创建 PageFilter 实例的时候需要传入每页的行数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public PageFilter(final long pageSize) {\n    Preconditions.checkArgument(pageSize >= 0, "must be positive %s", pageSize);\n    this.pageSize = pageSize;\n  }\n')])])]),t("p",[e._v("下面的代码体现了客户端实现分页查询的主要逻辑，这里对其进行一下解释说明：")]),e._v(" "),t("p",[e._v("客户端进行分页查询，需要传递 "),t("code",[e._v("startRow")]),e._v("(起始 RowKey)，知道起始 "),t("code",[e._v("startRow")]),e._v(" 后，就可以返回对应的 pageSize 行数据。这里唯一的问题就是，对于第一次查询，显然 "),t("code",[e._v("startRow")]),e._v(" 就是表格的第一行数据，但是之后第二次、第三次查询我们并不知道 "),t("code",[e._v("startRow")]),e._v("，只能知道上一次查询的最后一条数据的 RowKey（简单称之为 "),t("code",[e._v("lastRow")]),e._v("）。")]),e._v(" "),t("p",[e._v("我们不能将 "),t("code",[e._v("lastRow")]),e._v(" 作为新一次查询的 "),t("code",[e._v("startRow")]),e._v(" 传入，因为 scan 的查询区间是[startRow，endRow) ，即前开后闭区间，这样 "),t("code",[e._v("startRow")]),e._v(" 在新的查询也会被返回，这条数据就重复了。")]),e._v(" "),t("p",[e._v("同时在不使用第三方数据库存储 RowKey 的情况下，我们是无法通过知道 "),t("code",[e._v("lastRow")]),e._v(" 的下一个 RowKey 的，因为 RowKey 的设计可能是连续的也有可能是不连续的。")]),e._v(" "),t("p",[e._v("由于 Hbase 的 RowKey 是按照字典序进行排序的。这种情况下，就可以在 "),t("code",[e._v("lastRow")]),e._v(" 后面加上 "),t("code",[e._v("0")]),e._v(" ，作为 "),t("code",[e._v("startRow")]),e._v(" 传入，因为按照字典序的规则，某个值加上 "),t("code",[e._v("0")]),e._v(" 后的新值，在字典序上一定是这个值的下一个值，对于 HBase 来说下一个 RowKey 在字典序上一定也是等于或者大于这个新值的。")]),e._v(" "),t("p",[e._v("所以最后传入 "),t("code",[e._v("lastRow")]),e._v("+"),t("code",[e._v("0")]),e._v("，如果等于这个值的 RowKey 存在就从这个值开始 scan,否则从字典序的下一个 RowKey 开始 scan。")]),e._v(" "),t("blockquote",[t("p",[e._v("25 个字母以及数字字符，字典排序如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'0' < '1' < '2' < ... < '9' < 'a' < 'b' < ... < 'z'\n")])])])]),e._v(" "),t("p",[e._v("分页查询主要实现逻辑：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('byte[] POSTFIX = new byte[] { 0x00 };\nFilter filter = new PageFilter(15);\n\nint totalRows = 0;\nbyte[] lastRow = null;\nwhile (true) {\n    Scan scan = new Scan();\n    scan.setFilter(filter);\n    if (lastRow != null) {\n        // 如果不是首行 则 lastRow + 0\n        byte[] startRow = Bytes.add(lastRow, POSTFIX);\n        System.out.println("start row: " +\n                           Bytes.toStringBinary(startRow));\n        scan.withStartRow(startRow);\n    }\n    ResultScanner scanner = table.getScanner(scan);\n    int localRows = 0;\n    Result result;\n    while ((result = scanner.next()) != null) {\n        System.out.println(localRows++ + ": " + result);\n        totalRows++;\n        lastRow = result.getRow();\n    }\n    scanner.close();\n    //最后一页，查询结束\n    if (localRows == 0) break;\n}\nSystem.out.println("total rows: " + totalRows);\n')])])]),t("blockquote",[t("p",[e._v("需要注意的是在多台 Regin Services 上执行分页过滤的时候，由于并行执行的过滤器不能共享它们的状态和边界，所以有可能每个过滤器都会在完成扫描前获取了 PageCount 行的结果，这种情况下会返回比分页条数更多的数据，分页过滤器就有失效的可能。")])]),e._v(" "),t("h3",{attrs:{id:"时间戳过滤器-timestampsfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间戳过滤器-timestampsfilter"}},[e._v("#")]),e._v(" 时间戳过滤器 (TimestampsFilter)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("List<Long> list = new ArrayList<>();\nlist.add(1554975573000L);\nTimestampsFilter timestampsFilter = new TimestampsFilter(list);\nscan.setFilter(timestampsFilter);\n")])])]),t("h3",{attrs:{id:"首次行键过滤器-firstkeyonlyfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首次行键过滤器-firstkeyonlyfilter"}},[e._v("#")]),e._v(" 首次行键过滤器 (FirstKeyOnlyFilter)")]),e._v(" "),t("p",[t("code",[e._v("FirstKeyOnlyFilter")]),e._v(" 只扫描每行的第一列，扫描完第一列后就结束对当前行的扫描，并跳转到下一行。相比于全表扫描，其性能更好，通常用于行数统计的场景，因为如果某一行存在，则行中必然至少有一列。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FirstKeyOnlyFilter firstKeyOnlyFilter = new FirstKeyOnlyFilter();\nscan.set(firstKeyOnlyFilter);\n")])])]),t("h2",{attrs:{id:"包装过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装过滤器"}},[e._v("#")]),e._v(" 包装过滤器")]),e._v(" "),t("p",[e._v("包装过滤器就是通过包装其他过滤器以实现某些拓展的功能。")]),e._v(" "),t("h3",{attrs:{id:"skipfilter-过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#skipfilter-过滤器"}},[e._v("#")]),e._v(" SkipFilter 过滤器")]),e._v(" "),t("p",[t("code",[e._v("SkipFilter")]),e._v(" 包装一个过滤器，当被包装的过滤器遇到一个需要过滤的 KeyValue 实例时，则拓展过滤整行数据。下面是一个使用示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 定义 ValueFilter 过滤器\nFilter filter1 = new ValueFilter(CompareOperator.NOT_EQUAL,\n      new BinaryComparator(Bytes.toBytes("xxx")));\n// 使用 SkipFilter 进行包装\nFilter filter2 = new SkipFilter(filter1);\n')])])]),t("h3",{attrs:{id:"whilematchfilter-过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#whilematchfilter-过滤器"}},[e._v("#")]),e._v(" WhileMatchFilter 过滤器")]),e._v(" "),t("p",[t("code",[e._v("WhileMatchFilter")]),e._v(" 包装一个过滤器，当被包装的过滤器遇到一个需要过滤的 KeyValue 实例时，"),t("code",[e._v("WhileMatchFilter")]),e._v(" 则结束本次扫描，返回已经扫描到的结果。下面是其使用示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Filter filter1 = new RowFilter(CompareOperator.NOT_EQUAL,\n                               new BinaryComparator(Bytes.toBytes("rowKey4")));\n\nScan scan = new Scan();\nscan.setFilter(filter1);\nResultScanner scanner1 = table.getScanner(scan);\nfor (Result result : scanner1) {\n    for (Cell cell : result.listCells()) {\n        System.out.println(cell);\n    }\n}\nscanner1.close();\n\nSystem.out.println("--------------------");\n\n// 使用 WhileMatchFilter 进行包装\nFilter filter2 = new WhileMatchFilter(filter1);\n\nscan.setFilter(filter2);\nResultScanner scanner2 = table.getScanner(scan);\nfor (Result result : scanner1) {\n    for (Cell cell : result.listCells()) {\n        System.out.println(cell);\n    }\n}\nscanner2.close();\nrowKey0/student:name/1555035006994/Put/vlen=8/seqid=0\nrowKey1/student:name/1555035007019/Put/vlen=8/seqid=0\nrowKey2/student:name/1555035007025/Put/vlen=8/seqid=0\nrowKey3/student:name/1555035007037/Put/vlen=8/seqid=0\nrowKey5/student:name/1555035007051/Put/vlen=8/seqid=0\nrowKey6/student:name/1555035007057/Put/vlen=8/seqid=0\nrowKey7/student:name/1555035007062/Put/vlen=8/seqid=0\nrowKey8/student:name/1555035007068/Put/vlen=8/seqid=0\nrowKey9/student:name/1555035007073/Put/vlen=8/seqid=0\n--------------------\nrowKey0/student:name/1555035006994/Put/vlen=8/seqid=0\nrowKey1/student:name/1555035007019/Put/vlen=8/seqid=0\nrowKey2/student:name/1555035007025/Put/vlen=8/seqid=0\nrowKey3/student:name/1555035007037/Put/vlen=8/seqid=0\n')])])]),t("p",[e._v("可以看到被包装后，只返回了 "),t("code",[e._v("rowKey4")]),e._v(" 之前的数据。")]),e._v(" "),t("h2",{attrs:{id:"filterlist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filterlist"}},[e._v("#")]),e._v(" FilterList")]),e._v(" "),t("p",[e._v("以上都是讲解单个过滤器的作用，当需要多个过滤器共同作用于一次查询的时候，就需要使用 "),t("code",[e._v("FilterList")]),e._v("。"),t("code",[e._v("FilterList")]),e._v(" 支持通过构造器或者 "),t("code",[e._v("addFilter")]),e._v(" 方法传入多个过滤器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 构造器传入\npublic FilterList(final Operator operator, final List<Filter> filters)\npublic FilterList(final List<Filter> filters)\npublic FilterList(final Filter... filters)\n\n// 方法传入\n public void addFilter(List<Filter> filters)\n public void addFilter(Filter filter)\n")])])]),t("p",[e._v("多个过滤器组合的结果由 "),t("code",[e._v("operator")]),e._v(" 参数定义 ，其可选参数定义在 "),t("code",[e._v("Operator")]),e._v(" 枚举类中。只有 "),t("code",[e._v("MUST_PASS_ALL")]),e._v(" 和 "),t("code",[e._v("MUST_PASS_ONE")]),e._v(" 两个可选的值：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("MUST_PASS_ALL")]),e._v(" ：相当于 AND，必须所有的过滤器都通过才认为通过；")]),e._v(" "),t("li",[t("strong",[e._v("MUST_PASS_ONE")]),e._v(" ：相当于 OR，只有要一个过滤器通过则认为通过。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@InterfaceAudience.Public\n  public enum Operator {\n    /** !AND */\n    MUST_PASS_ALL,\n    /** !OR */\n    MUST_PASS_ONE\n  }\n")])])]),t("p",[e._v("使用示例如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('List<Filter> filters = new ArrayList<Filter>();\n\nFilter filter1 = new RowFilter(CompareOperator.GREATER_OR_EQUAL,\n                               new BinaryComparator(Bytes.toBytes("XXX")));\nfilters.add(filter1);\n\nFilter filter2 = new RowFilter(CompareOperator.LESS_OR_EQUAL,\n                               new BinaryComparator(Bytes.toBytes("YYY")));\nfilters.add(filter2);\n\nFilter filter3 = new QualifierFilter(CompareOperator.EQUAL,\n                                     new RegexStringComparator("ZZZ"));\nfilters.add(filter3);\n\nFilterList filterList = new FilterList(filters);\n\nScan scan = new Scan();\nscan.setFilter(filterList);\n')])])]),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://item.jd.com/11321037.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《HBase 权威指南》"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/larsgeorge/hbase-book",target:"_blank",rel:"noopener noreferrer"}},[e._v("《HBase 权威指南》官方源码"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=l.exports}}]);