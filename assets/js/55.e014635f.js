(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{395:function(e,o,t){"use strict";t.r(o);var _=t(4),v=Object(_.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"hbase-数据模型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hbase-数据模型"}},[e._v("#")]),e._v(" HBase 数据模型")]),e._v(" "),o("p",[e._v("HBase 是一个面向 "),o("code",[e._v("列")]),e._v(" 的数据库管理系统，这里更为确切的而说，HBase 是一个面向 "),o("code",[e._v("列族")]),e._v(" 的数据库管理系统。表 schema 仅定义列族，表具有多个列族，每个列族可以包含任意数量的列，列由多个单元格（cell）组成，单元格可以存储多个版本的数据，多个版本数据以时间戳进行区分。")]),e._v(" "),o("h2",{attrs:{id:"hbase-逻辑存储结构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hbase-逻辑存储结构"}},[e._v("#")]),e._v(" HBase 逻辑存储结构")]),e._v(" "),o("ul",[o("li",[o("strong",[o("code",[e._v("Table")])]),e._v("：Table 由 Row 和 Column 组成。")]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Row")])]),e._v("：Row 是列族（Column Family）的集合。")]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Row Key")])]),e._v("："),o("strong",[o("code",[e._v("Row Key")]),e._v(" 是用来检索记录的主键")]),e._v("。\n"),o("ul",[o("li",[o("code",[e._v("Row Key")]),e._v(" 是未解释的字节数组，所以理论上，任何数据都可以通过序列化表示成字符串或二进制，从而存为 HBase 的键值。")]),e._v(" "),o("li",[e._v("表中的行，是按照 "),o("code",[e._v("Row Key")]),e._v(" 的字典序进行排序。这里需要注意以下两点：\n"),o("ul",[o("li",[e._v("因为字典序对 Int 排序的结果是 1,10,100,11,12,13,14,15,16,17,18,19,2,20,21,…,9,91,92,93,94,95,96,97,98,99。如果你使用整型的字符串作为行键，那么为了保持整型的自然序，行键必须用 0 作左填充。")]),e._v(" "),o("li",[e._v("行的一次读写操作是原子性的 (不论一次读写多少列)。")])])]),e._v(" "),o("li",[e._v("所有对表的访问都要通过 Row Key，有以下三种方式：\n"),o("ul",[o("li",[e._v("通过指定的 "),o("code",[e._v("Row Key")]),e._v(" 进行访问；")]),e._v(" "),o("li",[e._v("通过 "),o("code",[e._v("Row Key")]),e._v(" 的 range 进行访问，即访问指定范围内的行；")]),e._v(" "),o("li",[e._v("进行全表扫描。")])])])])]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Column Family")])]),e._v("：即列族。HBase 表中的每个列，都归属于某个列族。列族是表的 Schema 的一部分，所以列族需要在创建表时进行定义。\n"),o("ul",[o("li",[e._v("一个表的列族必须作为表模式定义的一部分预先给出，但是新的列族成员可以随后按需加入。")]),e._v(" "),o("li",[e._v("同一个列族的所有成员具有相同的前缀，例如 "),o("code",[e._v("info:format")]),e._v("，"),o("code",[e._v("info:geo")]),e._v(" 都属于 "),o("code",[e._v("info")]),e._v(" 这个列族。")])])]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Column Qualifier")])]),e._v("：列限定符。可以理解为是具体的列名，例如 "),o("code",[e._v("info:format")]),e._v("，"),o("code",[e._v("info:geo")]),e._v(" 都属于 "),o("code",[e._v("info")]),e._v(" 这个列族，它们的列限定符分别是 "),o("code",[e._v("format")]),e._v(" 和 "),o("code",[e._v("geo")]),e._v("。列族和列限定符之间始终以冒号分隔。需要注意的是列限定符不是表 Schema 的一部分，你可以在插入数据的过程中动态创建列。")]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Column")])]),e._v("：HBase 中的列由列族和列限定符组成，由 "),o("code",[e._v(":")]),e._v("(冒号) 进行分隔，即一个完整的列名应该表述为 "),o("code",[e._v("列族名 ：列限定符")]),e._v("。")]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Cell")])]),e._v("："),o("code",[e._v("Cell")]),e._v(" 是行，列族和列限定符的组合，并包含值和时间戳。HBase 中通过 "),o("code",[e._v("row key")]),e._v(" 和 "),o("code",[e._v("column")]),e._v(" 确定的为一个存储单元称为 "),o("code",[e._v("Cell")]),e._v("，你可以等价理解为关系型数据库中由指定行和指定列确定的一个单元格，但不同的是 HBase 中的一个单元格是由多个版本的数据组成的，每个版本的数据用时间戳进行区分。\n"),o("ul",[o("li",[o("code",[e._v("Cell")]),e._v(" 由行和列的坐标交叉决定，是有版本的。默认情况下，版本号是自动分配的，为 HBase 插入 "),o("code",[e._v("Cell")]),e._v(" 时的时间戳。"),o("code",[e._v("Cell")]),e._v(" 的内容是未解释的字节数组。")]),e._v(" "),o("li")])]),e._v(" "),o("li",[o("strong",[o("code",[e._v("Timestamp")])]),e._v("："),o("code",[e._v("Cell")]),e._v(" 的版本通过时间戳来索引，时间戳的类型是 64 位整型，时间戳可以由 HBase 在数据写入时自动赋值，也可以由客户显式指定。每个 "),o("code",[e._v("Cell")]),e._v(" 中，不同版本的数据按照时间戳倒序排列，即最新的数据排在最前面。")])]),e._v(" "),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551164224778.png",alt:"img"}})]),e._v(" "),o("h2",{attrs:{id:"hbase-物理存储结构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hbase-物理存储结构"}},[e._v("#")]),e._v(" HBase 物理存储结构")]),e._v(" "),o("p",[e._v("HBase 自动将表水平划分成区域（Region）。每个 Region 由表中 Row 的子集构成。每个 Region 由它所属的表的起始范围来表示（包含的第一行和最后一行）。初始时，一个表只有一个 Region，随着 Region 膨胀，当超过一定阈值时，会在某行的边界上分裂成两个大小基本相同的新 Region。在第一次划分之前，所有加载的数据都放在原始 Region 所在的那台服务器上。随着表变大，Region 个数也会逐渐增加。Region 是在 HBase 集群上分布数据的最小单位。")]),e._v(" "),o("h2",{attrs:{id:"hbase-数据模型示例"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hbase-数据模型示例"}},[e._v("#")]),e._v(" HBase 数据模型示例")]),e._v(" "),o("p",[e._v("下图为 HBase 中一张表的：")]),e._v(" "),o("ul",[o("li",[e._v("RowKey 为行的唯一标识，所有行按照 RowKey 的字典序进行排序；")]),e._v(" "),o("li",[e._v("该表具有两个列族，分别是 personal 和 office;")]),e._v(" "),o("li",[e._v("其中列族 personal 拥有 name、city、phone 三个列，列族 office 拥有 tel、addres 两个列。")])]),e._v(" "),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200601172926.png",alt:"img"}})]),e._v(" "),o("blockquote",[o("p",[o("em",[e._v("图片引用自 : HBase 是列式存储数据库吗")]),e._v(" "),o("em",[e._v("https://www.iteblog.com/archives/2498.html")])])]),e._v(" "),o("h2",{attrs:{id:"hbase-表特性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hbase-表特性"}},[e._v("#")]),e._v(" HBase 表特性")]),e._v(" "),o("p",[e._v("Hbase 的表具有以下特点：")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("容量大")]),e._v("：一个表可以有数十亿行，上百万列；")]),e._v(" "),o("li",[o("strong",[e._v("面向列")]),e._v("：数据是按照列存储，每一列都单独存放，数据即索引，在查询时可以只访问指定列的数据，有效地降低了系统的 I/O 负担；")]),e._v(" "),o("li",[o("strong",[e._v("稀疏性")]),e._v("：空 (null) 列并不占用存储空间，表可以设计的非常稀疏 ；")]),e._v(" "),o("li",[o("strong",[e._v("数据多版本")]),e._v("：每个单元中的数据可以有多个版本，按照时间戳排序，新的数据在最上面；")]),e._v(" "),o("li",[o("strong",[e._v("存储类型")]),e._v("：所有数据的底层存储格式都是字节数组 (byte[])。")])]),e._v(" "),o("h2",{attrs:{id:"参考资料"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("官方")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"http://hbase.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官网"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://hbase.apache.org/book.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官方文档"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"http://abloz.com/hbase/book.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官方文档中文版"),o("OutboundLink")],1)])])]),e._v(" "),o("li",[o("strong",[e._v("书籍")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://book.douban.com/subject/27600204/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hadoop 权威指南"),o("OutboundLink")],1)])])]),e._v(" "),o("li",[o("strong",[e._v("文章")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bigtable: A Distributed Storage System for Structured Data"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://mapr.com/blog/in-depth-look-hbase-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("An In-Depth Look at the HBase Architecture"),o("OutboundLink")],1)])])]),e._v(" "),o("li",[o("strong",[e._v("教程")]),e._v(" "),o("ul",[o("li",[e._v("https://github.com/heibaiying/BigData-Notes")]),e._v(" "),o("li",[e._v("https://www.cloudduggu.com/hbase/introduction/")])])])])])}),[],!1,null,null,null);o.default=v.exports}}]);